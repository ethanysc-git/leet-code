Depth-first search
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:    
        stack = [(p, q)]
        while stack:
            p, q = stack.pop()
            if p == None and q == None:
                continue
            if p == None or q == None:
                return False
            if p.val == q.val:
                stack.append((p.left, q.left))
                stack.append((p.right, q.right))
            else:
                return False
        return True
		
Breadth-first search

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:    
        queue = [(p, q)]
        while len(queue) != 0:
            p, q = queue.pop()
            if p == None and q == None:
                continue
            if p == None or q == None:
                return False
            if p.val == q.val:
                queue.insert(0, (p.left, q.left))
                queue.insert(0, (p.right, q.right))
            else:
                return False
        return True