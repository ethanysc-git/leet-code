# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        def isSameTree(p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:    
            stack = [(p, q)]
            while stack:
                p, q = stack.pop()
                if p == None and q == None:
                    continue
                if p == None or q == None:
                    return False
                if p.val == q.val:
                    stack.append((p.left, q.right))
                    stack.append((p.right, q.left))
                else:
                    return False
            return True
        root_l = root.left
        root_r = root.right
        return isSameTree(root_l, root_r)
		
		
		
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        def isSameTree(p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
            if not p and not q:
                return True

            if not p or not q:
                return False

            if p.val != q.val:
                return False

            return isSameTree(p.left, q.right) and isSameTree(p.right, q.left)
        return isSameTree(root.left, root.right)